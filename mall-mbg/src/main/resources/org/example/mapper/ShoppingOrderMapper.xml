<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.example.mapper.ShoppingOrderMapper">
  <resultMap id="BaseResultMap" type="org.example.model.ShoppingOrder">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="code" jdbcType="VARCHAR" property="code" />
    <result column="money" jdbcType="DOUBLE" property="money" />
    <result column="create_date" jdbcType="DATE" property="createDate" />
    <result column="member_id" jdbcType="INTEGER" property="memberId" />
    <result column="address_id" jdbcType="INTEGER" property="addressId" />
    <result column="payment_id" jdbcType="INTEGER" property="paymentId" />
    <result column="status" jdbcType="INTEGER" property="status" />
  </resultMap>
  <sql id="Base_Column_List">
    id, code, money, create_date, member_id, address_id, payment_id, status
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from shopping_order
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from shopping_order
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="org.example.model.ShoppingOrder">
    insert into shopping_order (id, code, money, 
      create_date, member_id, address_id, 
      payment_id, status)
    values (#{id,jdbcType=INTEGER}, #{code,jdbcType=VARCHAR}, #{money,jdbcType=DOUBLE}, 
      #{createDate,jdbcType=DATE}, #{memberId,jdbcType=INTEGER}, #{addressId,jdbcType=INTEGER}, 
      #{paymentId,jdbcType=INTEGER}, #{status,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="org.example.model.ShoppingOrder">
    insert into shopping_order
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="code != null">
        code,
      </if>
      <if test="money != null">
        money,
      </if>
      <if test="createDate != null">
        create_date,
      </if>
      <if test="memberId != null">
        member_id,
      </if>
      <if test="addressId != null">
        address_id,
      </if>
      <if test="paymentId != null">
        payment_id,
      </if>
      <if test="status != null">
        status,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="code != null">
        #{code,jdbcType=VARCHAR},
      </if>
      <if test="money != null">
        #{money,jdbcType=DOUBLE},
      </if>
      <if test="createDate != null">
        #{createDate,jdbcType=DATE},
      </if>
      <if test="memberId != null">
        #{memberId,jdbcType=INTEGER},
      </if>
      <if test="addressId != null">
        #{addressId,jdbcType=INTEGER},
      </if>
      <if test="paymentId != null">
        #{paymentId,jdbcType=INTEGER},
      </if>
      <if test="status != null">
        #{status,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="org.example.model.ShoppingOrder">
    update shopping_order
    <set>
      <if test="code != null">
        code = #{code,jdbcType=VARCHAR},
      </if>
      <if test="money != null">
        money = #{money,jdbcType=DOUBLE},
      </if>
      <if test="createDate != null">
        create_date = #{createDate,jdbcType=DATE},
      </if>
      <if test="memberId != null">
        member_id = #{memberId,jdbcType=INTEGER},
      </if>
      <if test="addressId != null">
        address_id = #{addressId,jdbcType=INTEGER},
      </if>
      <if test="paymentId != null">
        payment_id = #{paymentId,jdbcType=INTEGER},
      </if>
      <if test="status != null">
        status = #{status,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="org.example.model.ShoppingOrder">
    update shopping_order
    set code = #{code,jdbcType=VARCHAR},
      money = #{money,jdbcType=DOUBLE},
      create_date = #{createDate,jdbcType=DATE},
      member_id = #{memberId,jdbcType=INTEGER},
      address_id = #{addressId,jdbcType=INTEGER},
      payment_id = #{paymentId,jdbcType=INTEGER},
      status = #{status,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>